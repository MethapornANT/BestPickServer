services:
  api:
    build:
      context: .  # Dockerfile ของ API อยู่ในโฟลเดอร์ API
      dockerfile: Dockerfile
    container_name: bestpick_api
    ports:
      - "3001:3000"  # แมปพอร์ต 3001 บนโฮสต์ไปยังพอร์ต 3000 ของ API
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql  # เชื่อมต่อกับ MySQL container
      - DB_USER=root
      - DB_PASSWORD=1234
      - DB_NAME=ReviewAPP
    volumes:
      - .:/app:rw 
    working_dir: /app
    command: "sh -c 'node server.js & python3 botgetprice.py'"  # รัน server.js และ botgetprice.py พร้อมกัน
    depends_on:
      - mysql
    networks:
      - mynetwork

  react:
    build:
      context: ../../admin_Bestpick  # Dockerfile ของ React อยู่ในโฟลเดอร์ admin_Bestpick
      dockerfile: Dockerfile
    container_name: react_app
    ports:
      - "3000:80"  # แมปพอร์ต 3000 บนโฮสต์ไปยังพอร์ต 80 ของ React
    networks:
      - mynetwork

  nginx:
    image: nginx
    container_name: mynginx
    ports:
      - "8080:80"  # แมปพอร์ต 8080 บนโฮสต์ไปยังพอร์ต 80 ของ Nginx
    networks:
      - mynetwork
    depends_on:
      - react
      - api

  mysql:
    image: mysql
    container_name: mymysql
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: ReviewAPP
    ports:
      - "3307:3306"  # แมปพอร์ต 3307 บนโฮสต์ไปยังพอร์ต 3306 ของ MySQL
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge
