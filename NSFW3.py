import os
import torch
from PIL import Image
from transformers import SiglipForImageClassification, AutoImageProcessor # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• Hugging Face
import torch.nn.functional as F
import pandas as pd # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô CSV/Excel
from datetime import datetime # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Hugging Face ---
# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
UPLOAD_FOLDER = './TestPIC' # ‡πÉ‡∏ä‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
os.makedirs(UPLOAD_FOLDER, exist_ok=True) # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏• Hugging Face
MODEL_NAME_HF = "strangerguardhf/nsfw_image_detection"

# LABELS ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö LABELS ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
# ‡πÄ‡∏õ‡πá‡∏î‡∏ô‡πâ‡∏≠‡∏¢‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° map label ‡∏Ç‡∏≠‡∏á HF ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏á‡∏±‡∏ö
TARGET_LABELS = ['normal', 'hentai', 'porn', 'sexy', 'anime']

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Device ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ (GPU ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ, ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡∏Å‡πá CPU)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# --- ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Hugging Face (Siglip) ---
model_hf = None
processor_hf = None
print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ processor ‡∏à‡∏≤‡∏Å Hugging Face: {MODEL_NAME_HF}...")
try:
    model_hf = SiglipForImageClassification.from_pretrained(MODEL_NAME_HF)
    processor_hf = AutoImageProcessor.from_pretrained(MODEL_NAME_HF)
    model_hf.eval()
    model_hf.to(device)
    print(f"‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• '{MODEL_NAME_HF}' ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏á‡∏±‡∏ö! ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô: {device}")
except Exception as e:
    print(f"üíî ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Hugging Face '{MODEL_NAME_HF}': {e}")
    print("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡∏á‡∏±‡∏ö")
    model_hf = None
    processor_hf = None
    exit() # ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏• Hugging Face (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á) ---
def predict_with_hf_model_formatted(image_path):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏• Hugging Face
    ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏° TARGET_LABELS
    """
    if model_hf is None or processor_hf is None:
        return {"error": "‡πÇ‡∏°‡πÄ‡∏î‡∏• Hugging Face ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏á‡∏±‡∏ö"}
    
    if not os.path.exists(image_path):
        return {"error": f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà {image_path} ‡∏á‡∏±‡∏ö"}

    try:
        image = Image.open(image_path).convert("RGB")
        inputs = processor_hf(images=image, return_tensors="pt").to(device)
        
        with torch.no_grad():
            outputs = model_hf(**inputs)
            logits = outputs.logits
            probs = torch.nn.functional.softmax(logits, dim=1).squeeze().tolist()

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• HF ‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°
        original_hf_scores = {model_hf.config.id2label[i]: round(probs[i]*100, 2) for i in range(len(probs))}
        
        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö TARGET_LABELS ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        formatted_scores = {label.capitalize(): 0.0 for label in TARGET_LABELS} # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0%
        
        # Mapping label ‡∏à‡∏≤‡∏Å HF ‡πÑ‡∏õ‡∏¢‡∏±‡∏á TARGET_LABELS ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        # ‡πÄ‡∏õ‡πá‡∏î‡∏ô‡πâ‡∏≠‡∏¢‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ label ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° map ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô
        # ‡πÄ‡∏ä‡πà‡∏ô 'Normal' -> 'normal', 'Hentai' -> 'hentai', 'Pornography' -> 'porn'
        # 'Enticing or Sensual' ‡∏≠‡∏≤‡∏à‡∏à‡∏∞ map ‡πÑ‡∏õ 'sexy'
        # 'Anime Picture' -> 'anime'
        
        # Map ‡πÅ‡∏ö‡∏ö hardcode ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
        if 'Normal' in original_hf_scores:
            formatted_scores['Normal'] = original_hf_scores['Normal']
        if 'Hentai' in original_hf_scores:
            formatted_scores['Hentai'] = original_hf_scores['Hentai']
        if 'Pornography' in original_hf_scores:
            formatted_scores['Porn'] = original_hf_scores['Pornography'] # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô Porn
        if 'Enticing or Sensual' in original_hf_scores:
            formatted_scores['Sexy'] = original_hf_scores['Enticing or Sensual'] # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô Sexy
        if 'Anime Picture' in original_hf_scores:
            formatted_scores['Anime'] = original_hf_scores['Anime Picture']


        # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Hentai ‡πÅ‡∏•‡∏∞ Pornography ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ .get() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô KeyError
        hentai_score = formatted_scores.get("Hentai", 0.0)
        porn_score = formatted_scores.get("Porn", 0.0) # ‡πÉ‡∏ä‡πâ 'Porn' ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤ map ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå NSFW
        is_nsfw = hentai_score > 20 or porn_score > 20

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô Terminal
        print(f"\n‚ú® ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö NSFW ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {os.path.basename(image_path)} (‡∏à‡∏≤‡∏Å Hugging Face Model) ‚ú®")
        for label, score in formatted_scores.items():
            print(f"  - {label}: {score:.2f}%")
        
        print(f"--- ‡∏™‡∏£‡∏∏‡∏õ: ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ {'üî¥ ‡πÄ‡∏õ‡πá‡∏ô NSFW' if is_nsfw else 'üü¢ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô NSFW'} (Hentai > 20% ‡∏´‡∏£‡∏∑‡∏≠ Pornography > 20%) ---")
        
        return {
            "scores": formatted_scores, 
            "is_nsfw": is_nsfw, 
            "hentai": hentai_score, 
            "porn": porn_score
        }
    except Exception as e:
        print(f"üíî ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö NSFW ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {image_path}: {e}")
        return {"error": f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á: {e}"}

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ---
def get_image_files_in_folder(folder_path):
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    image_extensions = ('.png', '.jpg', '.jpeg', '.gif', '.bmp', '.tiff', '.webp')
    return [os.path.join(folder_path, f) for f in os.listdir(folder_path) 
            if os.path.isfile(os.path.join(folder_path, f)) and f.lower().endswith(image_extensions)]

def main_menu_hf():
    """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• HF"""
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå CSV ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Timestamp ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_filename = f"hf_nsfw_results_{timestamp}.csv"
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î header ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CSV (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö TARGET_LABELS)
    csv_headers = ['Image_Name', 'Status', 
                   'Normal_%', 'Hentai_%', 'Porn_%', 'Sexy_%', 'Anime_%', 
                   'is_NSFW']

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÜ ‡∏û‡∏£‡πâ‡∏≠‡∏° header ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if not os.path.exists(output_filename):
        with open(output_filename, 'w', encoding='utf-8-sig', newline='') as f:
            writer = pd.DataFrame(columns=csv_headers).to_csv(f, index=False, encoding='utf-8-sig')


    while True:
        print("\n--- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (Hugging Face Model) ‡∏á‡∏±‡∏ö ---")
        print("1. ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå (./TestPIC) ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•")
        print("2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•)")
        print("3. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        
        choice = input("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1, 2, ‡∏´‡∏£‡∏∑‡∏≠ 3): ")

        if choice == '1':
            print(f"\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {UPLOAD_FOLDER} ‡∏á‡∏±‡∏ö...")
            image_paths = get_image_files_in_folder(UPLOAD_FOLDER)
            
            if not image_paths:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå '{UPLOAD_FOLDER}' ‡∏á‡∏±‡∏ö")
                print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ô‡∏≥‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏á‡∏±‡∏ö")
                continue

            # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            batch_results = [] 
            
            for img_path in image_paths:
                result = predict_with_hf_model_formatted(img_path)
                
                row_data = {'Image_Name': os.path.basename(img_path)}
                if "error" in result:
                    row_data['Status'] = 'Error'
                    for label in TARGET_LABELS:
                        row_data[f'{label.capitalize()}_%'] = 'N/A'
                    row_data['is_NSFW'] = 'N/A'
                    print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {os.path.basename(img_path)}: {result['error']}")
                else:
                    row_data['Status'] = 'OK'
                    for label_key, score_value in result['scores'].items():
                        row_data[f'{label_key}_%'] = score_value # ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏∞‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö TARGET_LABELS
                    row_data['is_NSFW'] = result['is_nsfw']
                
                batch_results.append(row_data)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á CSV/Excel
            if batch_results:
                df_new = pd.DataFrame(batch_results)
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
                df_new.to_csv(output_filename, mode='a', header=False, index=False, encoding='utf-8-sig')
                print(f"\nüéâ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå: {output_filename} ‡πÅ‡∏•‡πâ‡∏ß‡∏á‡∏±‡∏ö!")
            else:
                print("\n‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏∏‡∏Å‡∏†‡∏≤‡∏û) ‡∏á‡∏±‡∏ö")

            print("\n--- ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏á‡∏±‡∏ö ---")

        elif choice == '2':
            real_image_to_test = input("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô Path ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô TestPIC/image.jpg ‡∏´‡∏£‡∏∑‡∏≠ D:/images/my_pic.png): ")
            if os.path.exists(real_image_to_test):
                predict_with_hf_model_formatted(real_image_to_test) # ‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á CSV
            else:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà '{real_image_to_test}' ‡∏á‡∏±‡∏ö")
                print("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Path ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏õ‡πâ‡∏≠‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏á‡∏±‡∏ö")

        elif choice == '3':
            print("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡∏±‡∏ö! ‡πÄ‡∏õ‡πá‡∏î‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞ ‡∏ö‡πä‡∏≤‡∏¢‡∏ö‡∏≤‡∏¢! üëã")
            break
        else:
            print("‚ö†Ô∏è ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏á‡∏±‡∏ö! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô 1, 2, ‡∏´‡∏£‡∏∑‡∏≠ 3 ‡∏ô‡∏∞‡∏á‡∏±‡∏ö")

# --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå ---
if __name__ == "__main__":
    main_menu_hf()